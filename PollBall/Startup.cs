using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.FileProviders;
using PollBall.Services;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;


namespace PollBall
{
    public class Startup
    {
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddSingleton<IPollResultsService, PollResultsService>();
            //: Injecting a Service to a Controller
            services.AddMvc();

        }

        public void Configure(IApplicationBuilder app, IHostingEnvironment env, IPollResultsService pollResults)
        {
            //app.Run(async (context) =>
            //{
            //    //await context.Response.WriteAsync("This text was generated by the app.Run middleware.");
            //    await context.Response.WriteAsync("This text was generated by the app.Run middleware. wwwroot folder path: " + env.WebRootPath);
            //});

            //app.UseStaticFiles();
            app.Use(async (c, n) =>
            {
                if (c.Request.Query.ContainsKey("favorite"))
                {
                    string selectedValue = c.Request.Query["favorite"];
                    //await c.Response.WriteAsync("Selected value is: " + selectedValue);
                    SelectedGame selectedGame = (SelectedGame)Enum.Parse(typeof(SelectedGame), selectedValue, true);
                    pollResults.AddVote(selectedGame);

                    //SortedDictionary<SelectedGame, int> gameVotes = pollResults.GetVoteResult();
                    //foreach (KeyValuePair<SelectedGame, int> currentVote in gameVotes)
                    //{
                    //    await c.Response.WriteAsync($"<div> Game name: {currentVote.Key}. Votes: {currentVote.Value} </div>");
                    //}
                    c.Response.Headers.Add("content-type", "text/html");
                    await c.Response.WriteAsync("Thank you for submitting the poll. You may look at the poll results <a href='/?submitted=true'>Here</a>.");
                }
                //else
                //{
                //    await n.Invoke();
                // }
                else
                {
                    await n.Invoke();
                }
            });

            app.UseStaticFiles();
            //app.UseStaticFiles();


            app.UseStaticFiles(new StaticFileOptions()
            {
                FileProvider = new PhysicalFileProvider(Path.Combine(Directory.GetCurrentDirectory(), "PollBall"))
            });

            app.UseMvcWithDefaultRoute();

            app.Run(async (context) =>
            {
                //await context.Response.WriteAsync("This text was generated by the app.Run middleware.");
                await context.Response.WriteAsync("This text was generated by the app.Run middleware. wwwroot folder path: " + env.WebRootPath);
            });
        }
    }
}
